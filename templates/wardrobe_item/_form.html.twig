{{ form_start(form) }}
<div class="space-y-12">
	<div class="grid grid-cols-1 gap-x-8 gap-y-10 border-b border-gray-900/10 pb-12">
		<div>
			<h1 class="text-2xl font-semibold text-gray-900 text-center mt-4">Informations sur votre nouveau vêtement</h1>
		</div>

		<div class="grid max-w-2xl grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6 md:col-span-2 m-auto">
			<div class="sm:col-span-full">
				<label for="image" class="block text-sm/6 font-medium text-gray-900">Image</label>
				<div class="mt-2">
					<label for="image" class="flex flex-col items-center justify-center w-full h-64 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100">
						<div class="flex flex-col items-center justify-center pt-5 pb-6">
							<svg class="w-10 h-10 mb-3 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewbox="0 0 24 24" stroke="currentColor" aria-hidden="true">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0l5 5m-5-5l5-5M17 16v-1a2 2 0 00-2-2H9a2 2 0 00-2 2v1"/>
							</svg>
							<p class="mb-2 text-sm text-gray-500">
								<span class="font-semibold">Cliquez pour uploader</span>
								ou faites glisser et déposer
							</p>
							<p class="text-xs text-gray-500">PNG, JPG, GIF (MAX. 800x400px)</p>
							{% if wardrobe_item is defined and wardrobe_item.id %}
								{% if form.image %}
									<p class="text-xs text-gray-500">Votre image actuelle :
										{{form.image}}</p>
								{% endif %}
							{% endif %}
						</div>
						<input id="image" name="{{ field_name(form.image) }}" type="file" accept="image/*" class="hidden">
					</label>
				</div>
				<button id="analyze-btn">Analyser avec l'IA</button>
			</div>
			{# <div class="mt-6 flex items-center justify-end gap-x-6 max-w-2xl m-auto">
				<button type="button" id="ai-analyze-button" class="rounded-md bg-green-600 px-3 py-2 text-sm font-semibold text-white shadow-xs hover:bg-green-500 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-green-600">
				  Analyser avec l'IA
				</button>
			</div> #}
			<div class="sm:col-span-full">
				<label for="description" class="block text-sm/6 font-medium text-gray-900">Description</label>
				<div class="mt-2">
					<input id="description" name="{{ field_name(form.description) }}" value="{{ field_value(form.description) }}" placeholder="{{ field_label(form.description) }}" type="text" autocomplete="name" class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6 border">
				</div>
			</div>
			<div class="sm:col-span-3">
				<label for="country" class="block text-sm/6 font-medium text-gray-900">Season</label>
				<div class="mt-2 grid grid-cols-1">
					<select name="{{ field_name(form.season) }}" class="col-start-1 row-start-1 w-full appearance-none rounded-md bg-white py-1.5 pr-8 pl-3 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6 border">
						{% for label, value in field_choices(form.season) %}
							<option value="{{ value }}">{{ label }}</option>
						{% endfor %}
					</select>
					<svg class="pointer-events-none col-start-1 row-start-1 mr-2 size-5 self-center justify-self-end text-gray-500 sm:size-4" viewbox="0 0 16 16" fill="currentColor" aria-hidden="true" data-slot="icon">
						<path fill-rule="evenodd" d="M4.22 6.22a.75.75 0 0 1 1.06 0L8 8.94l2.72-2.72a.75.75 0 1 1 1.06 1.06l-3.25 3.25a.75.75 0 0 1-1.06 0L4.22 7.28a.75.75 0 0 1 0-1.06Z" clip-rule="evenodd"/>
					</svg>
				</div>
			</div>

			<div class="sm:col-span-3">
				<label for="country" class="block text-sm/6 font-medium text-gray-900">Category</label>
				<div class="mt-2 grid grid-cols-1">
					<select name="{{ field_name(form.category) }}" class="col-start-1 row-start-1 w-full appearance-none rounded-md bg-white py-1.5 pr-8 pl-3 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6 border">
						{% for label, value in field_choices(form.category) %}
							<option value="{{ value }}" {% if value == field_value(form.category) %} selected {% endif %}>{{ label }}</option>
						{% endfor %}
					</select>
					<svg class="pointer-events-none col-start-1 row-start-1 mr-2 size-5 self-center justify-self-end text-gray-500 sm:size-4" viewbox="0 0 16 16" fill="currentColor" aria-hidden="true" data-slot="icon">
						<path fill-rule="evenodd" d="M4.22 6.22a.75.75 0 0 1 1.06 0L8 8.94l2.72-2.72a.75.75 0 1 1 1.06 1.06l-3.25 3.25a.75.75 0 0 1-1.06 0L4.22 7.28a.75.75 0 0 1 0-1.06Z" clip-rule="evenodd"/>
					</svg>
				</div>
			</div>

			<div class="sm:col-span-2">
				<label for="name" class="block text-sm/6 font-medium text-gray-900">Name</label>
				<div class="mt-2">
					<input id="name" name="{{ field_name(form.name) }}" value="{{ field_value(form.name) }}" placeholder="{{ field_label(form.name) }}" type="text" autocomplete="name" class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6 border">
				</div>
			</div>
			<div class="sm:col-span-2">
				<label for="brand" class="block text-sm/6 font-medium text-gray-900">Brand</label>
				<div class="mt-2">
					<input id="brand" name="{{ field_name(form.brand) }}" value="{{ field_value(form.brand) }}" placeholder="{{ field_label(form.brand) }}" type="text" autocomplete="name" class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6 border">
				</div>
			</div>

			<div class="sm:col-span-2">
				<label for="size" class="block text-sm/6 font-medium text-gray-900">Size</label>
				<div class="mt-2">
					<input id="size" name="{{ field_name(form.size) }}" value="{{ field_value(form.size) }}" placeholder="{{ field_label(form.size) }}" type="text" autocomplete="name" class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6 border">
				</div>
			</div>

			<div class="sm:col-span-2">
				<label for="country" class="block text-sm/6 font-medium text-gray-900">Status</label>
				<div class="mt-2 grid grid-cols-1">
					<select name="{{ field_name(form.status) }}" class="col-start-1 row-start-1 w-full appearance-none rounded-md bg-white py-1.5 pr-8 pl-3 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6 border">
						{% for label, value in field_choices(form.status) %}
							<option value="{{ value }}">{{ label }}</option>
						{% endfor %}
					</select>
					<svg class="pointer-events-none col-start-1 row-start-1 mr-2 size-5 self-center justify-self-end text-gray-500 sm:size-4" viewbox="0 0 16 16" fill="currentColor" aria-hidden="true" data-slot="icon">
						<path fill-rule="evenodd" d="M4.22 6.22a.75.75 0 0 1 1.06 0L8 8.94l2.72-2.72a.75.75 0 1 1 1.06 1.06l-3.25 3.25a.75.75 0 0 1-1.06 0L4.22 7.28a.75.75 0 0 1 0-1.06Z" clip-rule="evenodd"/>
					</svg>
				</div>
			</div>
			<div class="sm:col-span-2">
				<label for="color" class="block text-sm/6 font-medium text-gray-900">Color</label>
				<div class="mt-2">
					<input id="color" name="{{ field_name(form.color) }}" value="{{ field_value(form.color) }}" placeholder="{{ field_label(form.color) }}" type="text" autocomplete="name" class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6 border">
				</div>
			</div>
		</div>
	</div>
</div>

{% if wardrobe_item is defined and wardrobe_item.id %}
	<div class="mt-6 flex items-center justify-end gap-x-6 max-w-2xl m-auto">
		<a href="{{ path('app_wardrobe_item_show', {'id': wardrobe_item.id}) }}" class="text-sm/6 font-semibold text-gray-900">Cancel</a>
		<button type="submit" class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-xs hover:bg-indigo-500 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
			{{ button_label|default('Save') }}
		</button>
	</div>
{% else %}
	<div class="mt-6 flex items-center justify-end gap-x-6 max-w-2xl m-auto">
		<a href="{{ path('app_wardrobe_item_index')}}" class="text-sm/6 font-semibold text-gray-900">Cancel</a>
		<button type="submit" class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-xs hover:bg-indigo-500 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
			{{ button_label|default('Create') }}
		</button>
	</div>
{% endif %}
{{ form_row(form._token) }}
{{ form_end(form, {'render_rest': false}) }}
<script>
	document.getElementById('analyze-btn').addEventListener('click', function(e) {
	  e.preventDefault();
	  const imageInput = document.getElementById('image');
	  if (!imageInput.files || imageInput.files.length === 0) {
		alert("Veuillez sélectionner une image à analyser.");
		return;
	  }
	  const file = imageInput.files[0];
	  const reader = new FileReader();
	  
	  reader.onload = function(event) {
		// La donnée est au format dataURL : "data:image/png;base64,...."
		const dataUrl = event.target.result;
		const base64Data = dataUrl.split(',')[1]; // On récupère uniquement la partie base64
		const sampleImageData = base64Data.substring(0, 100) + '...';
		
		const prompt = "Analyse the following clothing item image data (base64 snippet): " + sampleImageData + "\n\n" +
		  "Determine the following attributes of the garment and return a valid JSON object with these keys:\n" +
		  "- name (the name of the garment),\n" +
		  "- brand (the brand of the garment),\n" +
		  "- color (the main color),\n" +
		  "- category (e.g., shirt, pants, dress, etc.),\n" +
		  "- description (a brief description of the garment).\n" +
		  "If any information is missing, return an empty string for that key.";
	
		// Attention : NE PAS exposer votre clé API en production
		const apikey ="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";

		fetch("https://api.openai.com/v1/chat/completions", {
		// fetch("https://api.openai.com/v1/completions", {
		  method: "POST",
		  headers: {
			"Content-Type": "application/json",
			"Authorization": "Bearer " + apikey
		  },
		  body: JSON.stringify({
			model: "gpt-3.5-turbo-0125", // ou "gpt-3.5-turbo" si nécessaire
			messages: [
			  {
				role: "system",
				content: "You are an expert in clothing analysis. Extract garment details from image data."
			  },
			  {
				role: "user",
				content: prompt
			  }
			],
			temperature: 0.7
		  })
		})
		.then(response => {
		  if (!response.ok) {
			return response.text().then(text => { throw new Error("HTTP error " + response.status + ": " + text); });
		  }
		  return response.json();
		})
		.then(data => {
		  console.log("Réponse OpenAI:", data);
		  console.log(data.choices[0].message.content);

		  const contentString = data.choices[0].message.content;

		  const cleanContent = contentString.replace(/```json/g, '').replace(/```/g, '').trim();

		   let wardrobeData;
		   try {
			wardrobeData = JSON.parse(cleanContent);
		   } catch (error) {
		   	console.error("Erreur lors du parsing JSON :", error);
		   }   

		   let Wname, Wbrand, Wcolor, Wcategory, Wdescription;
		   if (wardrobeData) {
			Wname = wardrobeData.name;        
			Wbrand = wardrobeData.brand;        
			Wcolor = wardrobeData.color;        
			Wcategory = wardrobeData.category;  
			Wdescription = wardrobeData.description;
			
			console.log("Name:", Wname);
			console.log("Brand:", Wbrand);
			console.log("Color:", Wcolor);
			console.log("Description:", Wdescription);
		   }
		  if(data && data.choices && data.choices[0] && data.choices[0].message && data.choices[0].message.content){
			  try {
				  console.log("try is here")
				  // const result = JSON.parse(data.choices[0].message.content);
				  
				  document.getElementById('name').value = Wname;
				  document.getElementById('brand').value = Wbrand;
				  document.getElementById('color').value = Wcolor;
				document.getElementById('description').value = Wdescription;
			 } catch(e) {
			   console.error("Erreur lors du parsing du résultat JSON:", e);
			 }
		  }
		})
		.catch(error => {
		  console.error("Erreur lors de l'analyse:", error);
		  alert("Erreur lors de l'analyse avec l'IA: " + error.message);
		});
	  };
	  
	  reader.readAsDataURL(file);
	});
</script>